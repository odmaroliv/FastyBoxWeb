@page "/admin/requests"
@using FastyBoxWeb.Data.Entities
@using FastyBoxWeb.Data.Enums
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "Administrator")]
@inject IStringLocalizer<SharedResources> Localizer
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext
@inject IForwardingService ForwardingService

<PageTitle>@Localizer["ForwardingRequests"] - FastyBox</PageTitle>

<div class="max-w-7xl mx-auto">
    <div class="mb-6">
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-2xl font-semibold mb-2">@Localizer["ForwardingRequests"]</h1>
                <p class="text-gray-600">@Localizer["RequestsDescription"]</p>
            </div>
            <div>
                <div class="flex space-x-3">
                    <button @onclick="ExportToCSV" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                        <span class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                            </svg>
                            @Localizer["ExportCSV"]
                        </span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="bg-white rounded-lg shadow overflow-hidden mb-8">
        <div class="px-6 py-4 bg-gray-50 border-b border-gray-200 flex justify-between items-center">
            <h2 class="text-lg font-medium">@Localizer["Filters"]</h2>
            <button @onclick="ClearFilters" class="text-sm text-blue-500 hover:underline">@Localizer["ClearFilters"]</button>
        </div>
        <div class="p-6 grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
                <label for="status-filter" class="block text-sm font-medium text-gray-700 mb-1">@Localizer["Status"]</label>
                <select id="status-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        @bind="StatusFilter">
                    <option value="">@Localizer["AllStatuses"]</option>
                    @foreach (var status in Enum.GetValues<ForwardRequestStatus>())
                    {
                        <option value="@status">@GetStatusName(status)</option>
                    }
                </select>
            </div>
            <div>
                <label for="date-filter" class="block text-sm font-medium text-gray-700 mb-1">@Localizer["DateRange"]</label>
                <select id="date-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        @bind="DateFilter">
                    <option value="">@Localizer["AllDates"]</option>
                    <option value="today">@Localizer["Today"]</option>
                    <option value="yesterday">@Localizer["Yesterday"]</option>
                    <option value="thisweek">@Localizer["ThisWeek"]</option>
                    <option value="lastweek">@Localizer["LastWeek"]</option>
                    <option value="thismonth">@Localizer["ThisMonth"]</option>
                    <option value="lastmonth">@Localizer["LastMonth"]</option>
                </select>
            </div>
            <div>
                <label for="search" class="block text-sm font-medium text-gray-700 mb-1">@Localizer["Search"]</label>
                <div class="flex items-center">
                    <input type="text" id="search" class="flex-1 px-3 py-2 border border-gray-300 rounded-l-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                           @bind="SearchQuery" @bind:event="oninput" @onkeypress="HandleSearchKeyPress" placeholder="@Localizer["SearchPlaceholder"]" />
                    <button @onclick="ApplyFilters" class="px-4 py-2 bg-blue-500 text-white rounded-r-md hover:bg-blue-600">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="px-6 py-4 bg-gray-50 border-b border-gray-200">
            <div class="flex justify-between items-center">
                <h2 class="text-lg font-medium">
                    @Localizer["RequestsList"]
                    @if (FilteredRequests.Any())
                    {
                        <span class="text-sm font-normal text-gray-500">(@FilteredRequests.Count @Localizer["Results"])</span>
                    }
                </h2>
                <div class="flex items-center space-x-2">
                    <span class="text-sm text-gray-500">@Localizer["Page"] @CurrentPage @Localizer["Of"] @TotalPages</span>
                    <div class="flex space-x-1">
                        <button @onclick="PreviousPage" disabled="@(CurrentPage <= 1)" class="px-2 py-1 rounded-md @(CurrentPage <= 1 ? "text-gray-400 cursor-not-allowed" : "text-gray-700 hover:bg-gray-100")">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                            </svg>
                        </button>
                        <button @onclick="NextPage" disabled="@(CurrentPage >= TotalPages)" class="px-2 py-1 rounded-md @(CurrentPage >= TotalPages ? "text-gray-400 cursor-not-allowed" : "text-gray-700 hover:bg-gray-100")">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        @if (IsLoading)
        {
            <div class="flex justify-center py-8">
                <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
            </div>
        }
        else if (!Requests.Any())
        {
            <div class="text-center py-8 text-gray-500">
                <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
                </svg>
                <p>@Localizer["NoRequests"]</p>
            </div>
        }
        else
        {
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead>
                        <tr class="bg-gray-50">
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                @Localizer["Code"]
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                @Localizer["Customer"]
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                @Localizer["Status"]
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                @Localizer["Items"]
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                @Localizer["Total"]
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                @Localizer["Date"]
                            </th>
                            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                @Localizer["Actions"]
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var request in PagedRequests)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="font-medium text-gray-900">@request.TrackingCode</div>
                                    <div class="text-xs text-gray-500">@request.OriginalTrackingNumber</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="font-medium text-gray-900">@request.User?.FullName</div>
                                    <div class="text-xs text-gray-500">@request.User?.Email</div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <StatusBadge Status="@request.Status" />
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @request.Items.Count
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                    $@request.FinalTotal.ToString("F2")
                                    @if (request.TotalPaid > 0 && request.TotalPaid < request.FinalTotal)
                                    {
                                        <div class="text-xs text-gray-500">@Localizer["Paid"]: $@request.TotalPaid.ToString("F2")</div>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @request.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <a href="/admin/request/@request.Id" class="text-blue-600 hover:text-blue-900">@Localizer["Details"]</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="bg-gray-50 px-6 py-4 border-t border-gray-200 flex items-center justify-between">
                <div class="text-sm text-gray-500">
                    @Localizer["Showing"] @((CurrentPage - 1) * PageSize + 1) @Localizer["To"] @Math.Min(CurrentPage * PageSize, FilteredRequests.Count) @Localizer["Of"] @FilteredRequests.Count @Localizer["Results"]
                </div>
                <div class="flex space-x-2">
                    <button @onclick="PreviousPage" disabled="@(CurrentPage <= 1)" class="px-3 py-1 border border-gray-300 rounded-md @(CurrentPage <= 1 ? "text-gray-400 cursor-not-allowed" : "text-gray-700 hover:bg-gray-100")">
                        @Localizer["Previous"]
                    </button>
                    <button @onclick="NextPage" disabled="@(CurrentPage >= TotalPages)" class="px-3 py-1 border border-gray-300 rounded-md @(CurrentPage >= TotalPages ? "text-gray-400 cursor-not-allowed" : "text-gray-700 hover:bg-gray-100")">
                        @Localizer["Next"]
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<ForwardRequest> Requests { get; set; } = new();
    private List<ForwardRequest> FilteredRequests { get; set; } = new();
    private List<ForwardRequest> PagedRequests => FilteredRequests
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize)
        .ToList();

    private bool IsLoading { get; set; } = true;
    private string StatusFilter { get; set; } = string.Empty;
    private string DateFilter { get; set; } = string.Empty;
    private string SearchQuery { get; set; } = string.Empty;
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages => (int)Math.Ceiling(FilteredRequests.Count / (double)PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadRequests();
    }

    private async Task LoadRequests()
    {
        IsLoading = true;
        try
        {
            // Cargar todas las solicitudes para administrarlas en el cliente
            var requests = await DbContext.ForwardRequests
                .Include(r => r.User)
                .Include(r => r.Items)
                .OrderByDescending(r => r.CreatedAt)
                .Take(1000) // Limitar para evitar problemas de rendimiento
                .ToListAsync();

            Requests = requests;
            FilteredRequests = Requests;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void ApplyFilters()
    {
        CurrentPage = 1;

        var filteredRequests = Requests.AsEnumerable();

        // Aplicar filtro de estado
        if (!string.IsNullOrEmpty(StatusFilter) && Enum.TryParse<ForwardRequestStatus>(StatusFilter, out var status))
        {
            filteredRequests = filteredRequests.Where(r => r.Status == status);
        }

        // Aplicar filtro de fecha
        if (!string.IsNullOrEmpty(DateFilter))
        {
            var today = DateTime.Today;
            var yesterday = today.AddDays(-1);
            var thisWeekStart = today.AddDays(-(int)today.DayOfWeek);
            var lastWeekStart = thisWeekStart.AddDays(-7);
            var thisMonthStart = new DateTime(today.Year, today.Month, 1);
            var lastMonthStart = thisMonthStart.AddMonths(-1);
            var nextMonthStart = thisMonthStart.AddMonths(1);

            filteredRequests = DateFilter switch
            {
                "today" => filteredRequests.Where(r => r.CreatedAt.Date == today),
                "yesterday" => filteredRequests.Where(r => r.CreatedAt.Date == yesterday),
                "thisweek" => filteredRequests.Where(r => r.CreatedAt >= thisWeekStart && r.CreatedAt < thisWeekStart.AddDays(7)),
                "lastweek" => filteredRequests.Where(r => r.CreatedAt >= lastWeekStart && r.CreatedAt < thisWeekStart),
                "thismonth" => filteredRequests.Where(r => r.CreatedAt >= thisMonthStart && r.CreatedAt < nextMonthStart),
                "lastmonth" => filteredRequests.Where(r => r.CreatedAt >= lastMonthStart && r.CreatedAt < thisMonthStart),
                _ => filteredRequests
            };
        }

        // Aplicar búsqueda
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            var query = SearchQuery.ToLower();
            filteredRequests = filteredRequests.Where(r =>
                r.TrackingCode.ToLower().Contains(query) ||
                r.OriginalTrackingNumber?.ToLower().Contains(query) == true ||
                r.User?.FullName.ToLower().Contains(query) == true ||
                r.User?.Email?.ToLower().Contains(query) == true);
        }

        FilteredRequests = filteredRequests.ToList();
    }

    private void ClearFilters()
    {
        StatusFilter = string.Empty;
        DateFilter = string.Empty;
        SearchQuery = string.Empty;
        FilteredRequests = Requests;
        CurrentPage = 1;
    }

    private void HandleSearchKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            ApplyFilters();
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
        }
    }

    private async Task ExportToCSV()
    {
        // En una implementación real, aquí generaríamos el CSV y lo descargaríamos
        await Task.Delay(100);
        // Para esta demo, mostraríamos un mensaje o usaríamos JSRuntime para simular la descarga
    }

    private string GetStatusName(ForwardRequestStatus status)
    {
        return status switch
        {
            ForwardRequestStatus.Draft => Localizer["StatusDraft"],
            ForwardRequestStatus.AwaitingArrival => Localizer["StatusAwaitingArrival"],
            ForwardRequestStatus.ReceivedInWarehouse => Localizer["StatusReceivedInWarehouse"],
            ForwardRequestStatus.InReview => Localizer["StatusInReview"],
            ForwardRequestStatus.AwaitingPayment => Localizer["StatusAwaitingPayment"],
            ForwardRequestStatus.Processing => Localizer["StatusProcessing"],
            ForwardRequestStatus.InTransitToMexico => Localizer["StatusInTransitToMexico"],
            ForwardRequestStatus.Delivered => Localizer["StatusDelivered"],
            ForwardRequestStatus.Cancelled => Localizer["StatusCancelled"],
            _ => status.ToString()
        };
    }
}